# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the $default-branch branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Cloud Storage
#      roles/storage.admin   (if using Google Container Registry (gcr) instead)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - staging
      - production

env:
  PROJECT_ID: pemirakmitb # TODO: update Google Cloud project id
  GAR_LOCATION_DEV: "asia-northeast1" # TODO: update Artifact Registry location
  GAR_LOCATION_PROD: "asia-southeast1" # TODO: update Artifact Registry location
  REPOSITORY_DEV: "web-pemira-staging" # TODO: update Artifact Registry repository name
  REPOSITORY_PROD: "web-pemira" # TODO: update Artifact Registry repository name
  SERVICE: web-pemira # TODO: update Cloud Run service name
  REGION_DEV: "asia-northeast1" # TODO: update Cloud Run service region
  REGION_PROD: "asia-southeast1" # TODO: update Cloud Run service region

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Working Branch
        id: branch
        run: echo ::set-output name=branch::${GITHUB_REF#refs/heads/}

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}" # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: "${{ secrets.WIF_SERVICE_ACCOUNT }}" # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # NOTE: Alternative option - authentication via credentials json
      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      #     token_format: 'access_token'

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth Staging
        id: docker-auth-staging
        uses: "docker/login-action@v3"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION_DEV }}-docker.pkg.dev"
        if: ${{ steps.branch.outputs.branch == 'staging' }}

      - name: Docker Auth Production
        id: docker-auth-production
        uses: "docker/login-action@v3"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION_PROD }}-docker.pkg.dev"
        if: ${{ steps.branch.outputs.branch == 'production' }}

      - name: Build and Push Container Staging
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./Dockerfile.${{ steps.branch.outputs.branch }}
          push: true
          tags: ${{ env.GAR_LOCATION_DEV }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_DEV }}/${{ env.SERVICE }}-${{ steps.branch.outputs.branch }}:${{ github.sha }}
        if: ${{ steps.branch.outputs.branch == 'staging' }}

      - name: Build and Push Container Production
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./Dockerfile.${{ steps.branch.outputs.branch }}
          push: true
          tags: ${{ env.GAR_LOCATION_PROD }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_PROD }}/${{ env.SERVICE }}-${{ steps.branch.outputs.branch }}:${{ github.sha }}
        if: ${{ steps.branch.outputs.branch == 'production' }}

      # END - Docker auth and build

      - name: Deploy to Cloud Run Staging
        id: deploy-staging
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}-${{ steps.branch.outputs.branch }}
          region: ${{ env.REGION_DEV }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION_DEV }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_DEV }}/${{ env.SERVICE }}-${{ steps.branch.outputs.branch }}:${{ github.sha }}
          # NOTE: You can also set env variables here:
        if: ${{ steps.branch.outputs.branch == 'staging' }}

      - name: Deploy to Cloud Run Production
        id: deploy-production
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}-${{ steps.branch.outputs.branch }}
          region: ${{ env.REGION_PROD }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION_PROD }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_PROD }}/${{ env.SERVICE }}-${{ steps.branch.outputs.branch }}:${{ github.sha }}
          # NOTE: You can also set env variables here:
        if: ${{ steps.branch.outputs.branch == 'production' }}

      # If required, use the Cloud Run url output in later steps
      - name: Show Output Staging
        run: echo ${{ steps.deploy-staging.outputs.url }}
        if: ${{ steps.branch.outputs.branch == 'staging' }}
      
      - name: Show Output Production
        run: echo ${{ steps.deploy-production.outputs.url }}
        if: ${{ steps.branch.outputs.branch == 'production' }}